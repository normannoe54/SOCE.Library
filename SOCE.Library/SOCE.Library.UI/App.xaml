<Application x:Class="SOCE.Library.UI.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SOCE.Library.UI"
             xmlns:views="clr-namespace:SOCE.Library.UI.Views"
             xmlns:viewmodels="clr-namespace:SOCE.Library.UI.ViewModels"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"         
             StartupUri="Views/Shell/ShellView.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DialogHost.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Red.xaml" />-->
            </ResourceDictionary.MergedDictionaries>

            <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="#e38a8a"/>
            <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="Black"/>
            <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="#5c5c5c"/>
            <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="White"/>
            <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="#4f1d1b"/>
            <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="DarkGray"/>


            <!--<SolidColorBrush x:Key="SOCERed" Color="#9d3434"/>
            <SolidColorBrush x:Key="SOCELighterRed" Color="#e38a8a"/>
            <SolidColorBrush x:Key="SOCELightRed" Color="#e36d6d"/>-->

            <!--<DataTemplate DataType="{x:Type viewmodels:EmployeeDataVM}">
                <views:EmployeeDataView/>
            </DataTemplate>-->
            
            <DataTemplate DataType="{x:Type viewmodels:EmployeeVM}">
                <views:EmployeeView/>
            </DataTemplate>
            
            <!--<DataTemplate DataType="{x:Type viewmodels:HomeViewVM}">
                <views:HomeView/>
            </DataTemplate>-->
            
            <!--<DataTemplate DataType="{x:Type viewmodels:LicenseManagerVM}">
                <views:LicenseManagerView/>
            
            </DataTemplate>-->
            <!--<DataTemplate DataType="{x:Type viewmodels:ResourcesVM}">
                <views:ResourcesView/>
            
            </DataTemplate>-->
            <DataTemplate DataType="{x:Type viewmodels:TimesheetVM}">
                <views:TimesheetView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:PMScheduleVM}">
            <views:PMReportView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ScheduleWeekVM}">
                <views:ScheduleWeekView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:WeeklyScheduleVM}">
                <views:WeeklyScheduleView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ProjectScheduleVM}">
                <views:ProjectScheduleView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:TimesheetReviewVM}">
                <views:TimesheetReviewView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:PortalAI}">
                <views:ShellPortalView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewmodels:LoginAI}">
                <views:ShellLoginView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:LoginVM}">
                <views:LoginView/>
            </DataTemplate>
            
            <!--<DataTemplate DataType="{x:Type viewmodels:SignupVM}">
                <views:SignupView/>
            </DataTemplate>-->
            
            <DataTemplate DataType="{x:Type viewmodels:ForgotPasswordVM}">
                <views:ForgotPasswordView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewmodels:CodeInsertVM}">
                <views:CodeInsertView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewmodels:ProjectVM}">
                <views:ProjectView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewmodels:ResetPasswordVM}">
                <views:ResetPasswordView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:ProjectListVM}">
                <views:ProjectListView/>
            </DataTemplate>

            <SolidColorBrush x:Key="SOCERed" Color="#c92127"/>
            <SolidColorBrush x:Key="SOCEGray" Color="#636466"/>
            <!--<SolidColorBrush x:Key="SOCELighterRed" Color="#e38a8a"/>-->
            <SolidColorBrush x:Key="SOCELightRed" Color="#e24d52"/>
            <SolidColorBrush x:Key="SOCELightGray" Color="#898b8d"/>

            <SolidColorBrush x:Key="SOCEBlueCompliment" Color="#147975"/>
            <SolidColorBrush x:Key="SOCEGreenCompliment" Color="#1d9719"/>
            <SolidColorBrush x:Key="SOCEOrangeCompliment" Color="#c97221"/>
            <SolidColorBrush x:Key="SOCELightGreenCompliment" Color="#1d9719"/>
            
            <Style x:Key="PageHeader" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource SOCERed}" />
                <Setter Property="FontSize" Value="32"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
            </Style>
            
            <!--<Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGridCell}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Margin" Value="15 0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="0" SnapsToDevicePixels="True">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>-->

            <Style x:Key="menuTitle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="#ffffff" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Margin" Value="40 30 0 15" />
            </Style>

            <Style x:Key="menuButton" TargetType="Button">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Height" Value="45" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Margin" Value="15 0 15 5" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="10">
                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#F7F6F4" />
                        <Setter Property="Foreground" Value="{StaticResource SOCERed}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="IconButton" TargetType="materialDesign:PackIcon">
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
                <Setter Property="Margin" Value="25 0 0 0"/>
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="18"/>
            </Style>
            
            <Style x:Key="menuButtonIcon" TargetType="materialDesign:PackIcon">
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
                <Setter Property="Margin" Value="25 0 0 0"/>
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="18"/>
            </Style>

            <Style x:Key="menuButtonText" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" />
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Margin" Value="20 0 0 2"/>
            </Style>

            <Style x:Key="StarCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MaterialDesignCheckBox}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid>
                                <materialDesign:PackIcon Kind="Star" x:Name="star" Width="18" Height="18" VerticalAlignment="Center" HorizontalAlignment="Center" />
                                <materialDesign:PackIcon Kind="StarBorder" Width="18" Height="18" Foreground="Black" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="star" Property="Foreground" Value="Transparent"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="star" Property="Foreground" Value="orange"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <!--<Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="False">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="FontSize" Value="10"/>
                    </Trigger>
                </Style.Triggers>-->
                <!--<Setter Property="materialDesign:ToggleButtonAssist.OnContent">
                    <Setter.Value>
                        <materialDesign:PackIcon Kind="Circle" FlowDirection="LeftToRight" />
                    </Setter.Value>
                </Setter>-->
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
